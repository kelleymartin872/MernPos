[{"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\index.js":"1","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\UserService.js":"2","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Main.component.jsx":"3","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Loading.component.jsx":"4","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\ApiService.js":"5","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\DTOs\\Constants.js":"6","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\TransactionService.js":"7","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\SignInForm.component.jsx":"8","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Error.component.jsx":"9","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\ModalPopup.component.jsx":"10","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Offline.component.jsx":"11","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\MainMenu.component.jsx":"12","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\LineDetail.component.jsx":"13","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Footer.component.jsx":"14","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Header.component.jsx":"15","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Txn_components\\TxnList.component.jsx":"16","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\DTOs\\MenuButton.js":"17","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Form.component.jsx":"18","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Input.component.jsx":"19","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\AddItem.component.jsx":"20","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\ReturnItem.component.jsx":"21","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\ReturnReceipt.component.jsx":"22","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\AddCustomer.component.jsx":"23","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\ChangeQty.component.jsx":"24","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Payment.component.jsx":"25","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\RemoveLine.component.jsx":"26","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\LineDisc.component.jsx":"27","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\TotalDisc.component.jsx":"28","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\AbortTxn.component.jsx":"29","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Txn_components\\ItemLine.component.jsx":"30","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\SearchItem.component.jsx":"31","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\PaymentService.js":"32","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\CustomerService.js":"33","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\ItemService.js":"34"},{"size":754,"mtime":1623577553593,"results":"35","hashOfConfig":"36"},{"size":845,"mtime":1623577553586,"results":"37","hashOfConfig":"36"},{"size":12853,"mtime":1623586456740,"results":"38","hashOfConfig":"36"},{"size":658,"mtime":1623577553590,"results":"39","hashOfConfig":"36"},{"size":2635,"mtime":1623577553586,"results":"40","hashOfConfig":"36"},{"size":2252,"mtime":1623585733411,"results":"41","hashOfConfig":"36"},{"size":2673,"mtime":1623577553586,"results":"42","hashOfConfig":"36"},{"size":2988,"mtime":1623577553591,"results":"43","hashOfConfig":"36"},{"size":1615,"mtime":1623577553589,"results":"44","hashOfConfig":"36"},{"size":7028,"mtime":1623587447605,"results":"45","hashOfConfig":"36"},{"size":1498,"mtime":1623577553590,"results":"46","hashOfConfig":"36"},{"size":3980,"mtime":1623577553588,"results":"47","hashOfConfig":"36"},{"size":693,"mtime":1623577553588,"results":"48","hashOfConfig":"36"},{"size":3789,"mtime":1623577553587,"results":"49","hashOfConfig":"36"},{"size":1362,"mtime":1623577553587,"results":"50","hashOfConfig":"36"},{"size":6980,"mtime":1623577553592,"results":"51","hashOfConfig":"36"},{"size":215,"mtime":1623577553586,"results":"52","hashOfConfig":"36"},{"size":851,"mtime":1623577553590,"results":"53","hashOfConfig":"36"},{"size":594,"mtime":1623577553590,"results":"54","hashOfConfig":"36"},{"size":2280,"mtime":1624735939732,"results":"55","hashOfConfig":"36"},{"size":2286,"mtime":1624735924367,"results":"56","hashOfConfig":"36"},{"size":3948,"mtime":1623577553591,"results":"57","hashOfConfig":"36"},{"size":8536,"mtime":1623577553589,"results":"58","hashOfConfig":"36"},{"size":4178,"mtime":1623585706931,"results":"59","hashOfConfig":"36"},{"size":3735,"mtime":1623586830381,"results":"60","hashOfConfig":"36"},{"size":3025,"mtime":1623577553590,"results":"61","hashOfConfig":"36"},{"size":7003,"mtime":1623577553590,"results":"62","hashOfConfig":"36"},{"size":6965,"mtime":1623577553591,"results":"63","hashOfConfig":"36"},{"size":2022,"mtime":1623577553589,"results":"64","hashOfConfig":"36"},{"size":1322,"mtime":1623577553591,"results":"65","hashOfConfig":"36"},{"size":7003,"mtime":1623577553591,"results":"66","hashOfConfig":"36"},{"size":867,"mtime":1623585670364,"results":"67","hashOfConfig":"36"},{"size":1300,"mtime":1623585814420,"results":"68","hashOfConfig":"36"},{"size":1628,"mtime":1623585812747,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"cexqw8",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"72"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"72"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"72"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"72"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"72"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\index.js",[],["148","149"],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\UserService.js",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Main.component.jsx",["150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"\r\nimport React, { Component } from 'react';\r\nimport { withResizeDetector } from 'react-resize-detector';\r\nimport Swal from 'sweetalert2'\r\n\r\nimport Constants from '../DTOs/Constants' \r\n\r\nimport SignInForm from './Popup_Components/SignInForm.component';\r\nimport Offline from './Popup_Components/Offline.component';\r\nimport Error from './Popup_Components/Error.component';\r\nimport ModalPopup from './ModalPopup.component';\r\nimport TxnList from './Txn_components/TxnList.component';\r\nimport Header from './Header.component';\r\nimport LineDetail from './LineDetail.component';\r\nimport MainMenu from './MainMenu.component';\r\nimport Footer from './Footer.component';\r\n\r\nimport TransactionService from '../apiServices/TransactionService';\r\nimport UserService from '../apiServices/UserService';\r\n\r\nclass MainComponent extends Component \r\n{\r\n    mobileWidth = 765;\r\n\r\n    state = { \r\n        clientData : {  width:window.innerWidth, height:window.innerHeight, \r\n                        isMobile: window.innerWidth < this.mobileWidth , \r\n                        isMobileMenuOpen : false,\r\n                        selectedLineNmbr : -1 ,\r\n                        isLoading:false , internalError: false,\r\n                        modalPopupId : -1\r\n                    },\r\n        serverData : window.serverData.data,\r\n        transactions : window.serverData.txns\r\n    };\r\n\r\n    makeSelection = lineNumber => \r\n    {\r\n        try\r\n        {\r\n            let clientData = this.state.clientData;\r\n            clientData.selectedLineNmbr = lineNumber;\r\n\r\n            this.setState({ \r\n                clientData : clientData\r\n            });\r\n        }\r\n        catch(ex)\r\n        {\r\n            console.error(ex);\r\n            this.state.clientData.internalError = true;\r\n            this.setState({ \r\n                clientData : this.state.clientData\r\n            });\r\n        }\r\n    }\r\n    \r\n    componentDidUpdate(prevProps) \r\n    {\r\n        const { width, height } = this.props;\r\n\r\n        if (height !== prevProps.height || width !== prevProps.width) \r\n        {\r\n            this.setState({ \r\n                clientData : {width:width, height:height, isMobile : window.innerWidth < this.mobileWidth }\r\n            });\r\n        }\r\n    }\r\n\r\n    refreshUI(clientData = this.state.clientData)\r\n    {\r\n        try\r\n        {\r\n            let serverData = {};\r\n            let transactions = [];\r\n\r\n            if(window.serverData.data)\r\n                serverData = window.serverData.data\r\n\r\n            if(window.serverData.txns)\r\n                transactions = window.serverData.txns\r\n\r\n            this.setState({\r\n                clientData : clientData,\r\n                serverData : serverData,\r\n                transactions : transactions\r\n            });\r\n        }\r\n        catch(ex)\r\n        {\r\n            console.error(ex);\r\n            this.state.clientData.internalError = true;\r\n            this.setState({ \r\n                clientData : this.state.clientData\r\n            });\r\n        }\r\n    }\r\n\r\n    getNewTxn = async() => \r\n    {\r\n        try\r\n        {\r\n            let service = new TransactionService();\r\n            await service.newTxn();\r\n            \r\n            this.state.clientData.isLoading = false;\r\n            this.refreshUI(this.state.clientData);\r\n        }\r\n        catch(ex)\r\n        {\r\n            console.error(ex);\r\n            this.state.clientData.internalError = true;\r\n            this.setState({ \r\n                clientData : this.state.clientData\r\n            });\r\n        }\r\n    };\r\n\r\n    endTxn = async() => \r\n    {\r\n        try\r\n        {\r\n            let txnService = new TransactionService();\r\n            txnService.endTxn().then(res =>\r\n            {\r\n                if(res.data.flowSuccess === true)\r\n                {\r\n                    Swal.fire(\r\n                        'Transaction complete!','',\r\n                        'success'\r\n                    );\r\n                    \r\n                    txnService.newTxn().then(res =>\r\n                    {\r\n                        this.state.clientData.isLoading = false;\r\n                        this.state.clientData.modalPopupId = -1;\r\n                        this.refreshUI(this.state.clientData);\r\n                    });\r\n                }\r\n            });\r\n\r\n        }\r\n        catch(ex)\r\n        {\r\n            console.error(ex);\r\n            this.state.clientData.internalError = true;\r\n            this.setState({ \r\n                clientData : this.state.clientData\r\n            });\r\n        }\r\n    };\r\n\r\n    reconnect = async() => \r\n    {\r\n        try\r\n        {\r\n            this.state.clientData.internalError = false;\r\n            this.state.clientData.isLoading = true;\r\n            this.refreshUI(this.state.clientData);\r\n\r\n            let service = new UserService();\r\n            await service.signOut();\r\n            \r\n            this.state.clientData.isLoading = false;\r\n            this.refreshUI(this.state.clientData);\r\n        }\r\n        catch(ex)\r\n        {\r\n            console.error(ex);\r\n            this.state.clientData.internalError = true;\r\n            this.setState({ \r\n                clientData : this.state.clientData\r\n            });\r\n        }\r\n    };\r\n\r\n    signOff = async() => \r\n    {\r\n        try\r\n        {        \r\n            Swal.fire({\r\n                title: 'Sign Out?',\r\n                text: \"Are you sure you want to Sign Out ?\",\r\n                type: 'warning',\r\n                showCancelButton: true,\r\n                confirmButtonColor: '#3085d6',\r\n                cancelButtonColor: '#d33',\r\n                confirmButtonText: 'Yes!'\r\n            }).then( async(res) => {\r\n                if(res.isConfirmed) \r\n                {\r\n                    this.state.clientData.internalError = false;\r\n                    this.state.clientData.isLoading = true;\r\n                    this.refreshUI(this.state.clientData);\r\n        \r\n                    let service = new UserService();\r\n                    await service.signOut();\r\n                    \r\n                    this.state.clientData.isLoading = false;\r\n                    this.refreshUI(this.state.clientData);\r\n                }\r\n            });\r\n            \r\n        }\r\n        catch(ex)\r\n        {\r\n            console.error(ex);\r\n            this.state.clientData.internalError = true;\r\n            this.setState({ \r\n                clientData : this.state.clientData\r\n            });\r\n        }\r\n    };\r\n    \r\n    toggleMenu = () =>\r\n    {\r\n        this.state.clientData.isMobileMenuOpen = ! this.state.clientData.isMobileMenuOpen;\r\n        this.refreshUI(this.state.clientData);\r\n    }\r\n\r\n    showModal = (functionId) => \r\n    {\r\n        try\r\n        {\r\n            this.state.clientData.modalPopupId = functionId;\r\n            this.refreshUI(this.state.clientData);\r\n        }\r\n        catch(ex)\r\n        {\r\n            console.error(ex);\r\n            this.state.clientData.internalError = true;\r\n            this.setState({ \r\n                clientData : this.state.clientData\r\n            });\r\n        }\r\n    };\r\n    \r\n    closeModal = () => \r\n    {\r\n        try\r\n        {\r\n            this.state.clientData.modalPopupId = -1;\r\n            this.refreshUI(this.state.clientData);\r\n        }\r\n        catch(ex)\r\n        {\r\n            console.error(ex);\r\n            this.state.clientData.internalError = true;\r\n            this.setState({ \r\n                clientData : this.state.clientData\r\n            });\r\n        }\r\n    };\r\n\r\n    render() \r\n    { \r\n        try\r\n        {  \r\n            let height = this.state.clientData.height;\r\n            let mainStyle={\r\n                fontSize:20\r\n            };\r\n            \r\n            let TotalPriceStyle = {\r\n                padding:10,\r\n                color : \"white\",\r\n                width:\"50%\",\r\n                backgroundColor:\"#f16b52\",\r\n                position:\"absolute\",\r\n                bottom: height-(height - (0.10*height))\r\n            }\r\n\r\n            let txnListStyle= {\r\n                width:\"50%\",\r\n                overflowY:\"auto\",\r\n                overflowX:\"hidden\",\r\n                borderRight: \"2px solid black\",\r\n                padding:0,\r\n                height:\"70vh\"\r\n            };\r\n\r\n            let RightSideStyle = {width:\"50%\",padding:\"0px\"}\r\n\r\n            let modalStyle = {\r\n                backgroundColor:\"#303841\",\r\n                height:\"100vh\"\r\n            }\r\n            \r\n            \r\n            if(this.state.clientData.isMobile) \r\n            {\r\n                RightSideStyle.display = \"none\";\r\n                txnListStyle.width = \"100%\";\r\n                TotalPriceStyle.width = \"100%\";\r\n                txnListStyle.marginBottom = \"10vh\";\r\n            }\r\n\r\n\r\n            if(this.state.serverData.isOffline) \r\n            {\r\n                return (\r\n\r\n                    <div style={modalStyle}  >\r\n                        <Offline onRefresh = {this.reconnect} isLoading={this.state.clientData.isLoading} />\r\n                    </div> \r\n                );\r\n            }\r\n\r\n            if(this.state.serverData.posState === Constants.PosState.signedOff) \r\n            {\r\n                return (\r\n                    <div style={modalStyle}  >\r\n                        <SignInForm getNewTxn = {this.getNewTxn} isLoading={this.state.clientData.isLoading} />\r\n                    </div> \r\n                );\r\n            }\r\n\r\n            if(this.state.clientData.internalError) \r\n            {\r\n                Swal.fire({\r\n                    type: 'error',\r\n                    text: 'Internal server error occured.'\r\n                });\r\n            }\r\n            \r\n            let transaction = this.state.transactions[0];\r\n            return ( \r\n                <div  style={mainStyle}  >\r\n                    <Header onSignOff = {this.signOff} onMenuClick = {this.toggleMenu} /> \r\n\r\n                    <div style={{margin:\"0px\"}} className=\"row\"  >\r\n                        <div style={txnListStyle}   >\r\n                            <TxnList onSelectLine={this.makeSelection} \r\n                                clientData={this.state.clientData} \r\n                                serverData={this.state.serverData} \r\n                                transaction={transaction} /> \r\n                    \r\n                        </div>\r\n\r\n                        <div style={TotalPriceStyle} >\r\n                            <span style={{fontSize:\"30px\",fontWeight:'bold'}} > Amount Owed :</span> \r\n                            <span style={{fontSize:\"30px\",float:'right'}} > &#x20b9; {transaction.amountOwed} </span> \r\n                        </div>\r\n\r\n                        <div style={RightSideStyle} >\r\n                            <LineDetail onSelectLine={this.makeSelection} \r\n                                clientData={this.state.clientData} \r\n                                serverData={this.state.serverData} \r\n                                transaction={transaction}  /> \r\n                            <MainMenu  \r\n                                clientData={this.state.clientData} \r\n                                serverData={this.state.serverData} \r\n                                transaction={transaction} \r\n                                onModalShow={this.showModal} /> \r\n                        </div>\r\n                    </div>\r\n\r\n                    <Footer\r\n                        clientData={this.state.clientData} \r\n                        serverData={this.state.serverData} \r\n                        transaction={transaction} \r\n                        onChangeState={() => this.refreshUI()} /> \r\n                    \r\n                    \r\n                    { this.state.clientData.isMobile && \r\n                        <MainMenu clientData={this.state.clientData} \r\n                                serverData={this.state.serverData} \r\n                                transaction={transaction} \r\n                                onModalShow={this.showModal} /> \r\n                    }\r\n\r\n                    { this.state.clientData.modalPopupId > 0 && \r\n                        <ModalPopup modalId={this.state.clientData.modalPopupId} \r\n                            onModalClose={this.closeModal} endTxn={this.endTxn}  \r\n                            clientData={this.state.clientData} \r\n                            serverData={this.state.serverData} \r\n                            transaction={transaction} \r\n                            /> \r\n                    }\r\n\r\n                </div>\r\n\r\n            );\r\n              \r\n        }\r\n        catch(ex)\r\n        {\r\n            console.error(ex);\r\n            return ( \r\n                <Error onRefresh = {this.reconnect} />\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst AdaptiveWithDetector = withResizeDetector(MainComponent);\r\nconst Main = () => {\r\n    return (\r\n        <AdaptiveWithDetector />\r\n    );\r\n};\r\n  \r\nexport default Main;","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Loading.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\ApiService.js",["170","171"],"\r\nimport Constants from '../DTOs/Constants';\r\nimport axios from 'axios';\r\n\r\nexport default class ApiService\r\n{\r\n    constructor(reqMethod,reqUrl,reqObj)\r\n    {\r\n        this.reqMethod = reqMethod;\r\n        this.reqUrl = reqUrl;\r\n        this.reqObj = reqObj;\r\n    }\r\n\r\n    getResponse()\r\n    {\r\n        const reqUrl = this.reqUrl;\r\n        const reqObj = this.reqObj;\r\n\r\n        switch(this.reqMethod)\r\n        {\r\n            case \"GET\":\r\n            { \r\n                return new Promise( function(resolve,reject)\r\n                {\r\n                    axios.get(reqUrl, reqObj)\r\n                        .then(res => {\r\n                            window.serverData = res.data;\r\n                            resolve(window.serverData);\r\n                        })\r\n                        .catch(err => {\r\n                            if(err.response && err.response.data)\r\n                                window.serverData = err.response.data;\r\n                            else\r\n                            {\r\n                                window.serverData = {\r\n                                    data:\r\n                                    {\r\n                                        isOffline:true,\r\n                                        errorMsg:\"Server is Unreachable!\"\r\n                                    }\r\n                                };\r\n                            }\r\n                            resolve(window.serverData);\r\n                    });\r\n                });\r\n            }\r\n\r\n            case \"POST\":\r\n            { \r\n                return new Promise( function(resolve,reject)\r\n                {\r\n                    axios.post(reqUrl, reqObj)\r\n                        .then(res => {\r\n                            window.serverData = res.data;\r\n                            resolve(window.serverData);\r\n                        })\r\n                        .catch(err => {\r\n                            if(err.response && err.response.data)\r\n                                window.serverData = err.response.data;\r\n                            else\r\n                            {\r\n                                window.serverData = {\r\n                                    data:\r\n                                    {\r\n                                        isOffline:true,\r\n                                        errorMsg:\"Server is Unreachable!\"\r\n                                    }\r\n                                };\r\n                            }\r\n                            resolve(window.serverData);\r\n                        });\r\n                });\r\n            }\r\n        }\r\n        \r\n    }\r\n}\r\n","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\DTOs\\Constants.js",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\TransactionService.js",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\SignInForm.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Error.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\ModalPopup.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Offline.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\MainMenu.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\LineDetail.component.jsx",["172","173"],"\r\nimport React from 'react';\r\nimport Constants from '../DTOs/Constants'\r\n\r\n\r\nconst LineDetail = (props) => \r\n{\r\n    const mainStyle={ \r\n        width: \"100%\",\r\n        margin:0,\r\n        padding:10,\r\n        height:\"100%\"\r\n    };\r\n    \r\n    const lineDetailStyle={\r\n        padding:\"0px\",\r\n        overflowY:\"auto\",\r\n        height:\"40vh\", border: \"1px solid black\"\r\n    };\r\n\r\n    let txn = props.transaction;\r\n\r\n\r\n    return ( \r\n        <div style={{margin:\"0px\"}}  className=\"row\"  >\r\n            <div style={lineDetailStyle} className=\"col-12\" >\r\n                <div style={mainStyle}>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default LineDetail;","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Footer.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Header.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Txn_components\\TxnList.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\DTOs\\MenuButton.js",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Form.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Input.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\AddItem.component.jsx",["174"],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\ReturnItem.component.jsx",["175"],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\ReturnReceipt.component.jsx",["176"],"\r\nimport React from 'react';\r\nimport Form from './Form.component';\r\nimport Joi from 'joi-browser';\r\nimport TransactionService from '../../apiServices/TransactionService';\r\nimport ItemService from '../../apiServices/ItemService';\r\nimport Loading from './Loading.component';\r\nimport Swal from 'sweetalert2'\r\nimport Input from './Input.component';\r\nimport Constants from '../../DTOs/Constants';\r\n\r\nclass ReturnReceipt extends Form \r\n{\r\n    state = { \r\n        isLoading:false,\r\n        formData: {\r\n            TxnNmbr : 0,\r\n            TxnDate : \"\"\r\n        },\r\n        formError : \"\"\r\n    };\r\n\r\n    schema = {\r\n        TxnDate : Joi,\r\n        TxnNmbr : Joi.number()\r\n    };\r\n    \r\n    \r\n    returnReceipt = () =>\r\n    {   \r\n        this.setState({ isLoading:true });\r\n        \r\n        let service = new TransactionService();\r\n        let reqObj = {\r\n            TxnDate: this.state.formData.TxnDate,\r\n            TxnNmbr: this.state.formData.TxnNmbr \r\n        };\r\n\r\n        service.returnReceipt(reqObj).then(res =>\r\n        {\r\n            if(res.data.flowSuccess === true)\r\n            {\r\n                let reqObj = {\r\n                    state : Constants.PosState.payState\r\n                };\r\n                \r\n                service.changeState(reqObj).then(res =>\r\n                {\r\n                    if(res.data.flowSuccess === true)\r\n                    {\r\n                        Swal.fire(\r\n                            'Return receipt successful!','',\r\n                            'success'\r\n                        );\r\n                        this.props.doClose();\r\n                    }\r\n                });\r\n\r\n                this.setState({ formError : \"\", isLoading:false});\r\n                return;\r\n            }\r\n            else\r\n            {\r\n                this.setState({ formError : res.data.errorMsg , isLoading:false})\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    render() { \r\n        let formData = this.state.formData;\r\n        let formError = this.state.formError;\r\n\r\n        let render = [];\r\n        render.push(\r\n            <div key=\"modal-header\" className=\"modal-header\">\r\n                <h4 className=\"modal-title\" style={{margin:\"auto\"}}> Return Receipt </h4> \r\n                \r\n                <button type=\"button\" style={{fontSize:\"25px\" , marginLeft:\"0px\" }} \r\n                    onClick={() => this.props.doClose()}  className=\"close\" >\r\n                    &times;\r\n                </button>\r\n            </div>\r\n        );\r\n\r\n        render.push(\r\n            <div key=\"modal-body\" className=\"modal-body\">\r\n                <form> \r\n                    <Input name=\"TxnDate\" type=\"date\" value={formData.TxnDate} onChange={this.handleInputChange}  />\r\n                    <Input name=\"TxnNmbr\" type=\"text\" value={formData.TxnNmbr} onChange={this.handleInputChange}  />\r\n                   </form>\r\n            </div>\r\n        );\r\n        \r\n        render.push(\r\n            <div key=\"modal-footer\" className=\"modal-footer\">\r\n                <button\r\n                    type=\"button\" className=\"btn btn-success\" \r\n                    id=\"signIn_FormSubmit\" style={{width: \"99%\",backgroundColor:\"#f16b52\"}} \r\n                    onClick={() => this.returnReceipt()} > \r\n                    Return Receipt\r\n                </button>\r\n            </div>\r\n        );\r\n\r\n        if(formError && formError !== \"\")\r\n        {\r\n            render.push(\r\n                <div key=\"modal-error\" className=\"list-group-item list-group-item-danger\" > { formError } </div>\r\n            );\r\n        }\r\n\r\n        return ( \r\n            <div style={{paddingTop: \"100px\"}}>\r\n                <div className=\"modal-dialog \" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        {render}\r\n                    </div>\r\n                </div>\r\n                { this.state.isLoading &&  <Loading/> }\r\n            </div>\r\n         );\r\n    }\r\n\r\n\r\n}\r\n \r\nexport default ReturnReceipt;","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\AddCustomer.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\ChangeQty.component.jsx",["177","178"],"\r\nimport React from 'react';\r\nimport Form from './Form.component';\r\nimport Input from './Input.component';\r\nimport Joi from 'joi-browser';\r\nimport TransactionService from '../../apiServices/TransactionService';\r\nimport Loading from './Loading.component';\r\nimport PaymentService from '../../apiServices/PaymentService';\r\nimport ItemService from '../../apiServices/ItemService';\r\n\r\nclass ChangeQty extends Form \r\n{\r\n    state = { \r\n        isLoading:false,\r\n        formData: {\r\n            itemQty : \"\"\r\n        },\r\n        formError : \"\"\r\n    };\r\n\r\n    schema = {\r\n        itemQty: Joi.number()\r\n    };\r\n\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state.formData.itemQty = (this.props.itemObj.itemQty).toString();\r\n    }\r\n\r\n    submitForm = () =>\r\n    {   \r\n        try\r\n        {  \r\n            let inputQty = parseInt(this.state.formData.itemQty);\r\n            let currQty = parseInt(this.props.itemObj.itemQty);\r\n            if(inputQty === currQty)\r\n            {\r\n                this.props.doClose();\r\n                return;\r\n            }\r\n\r\n            if((inputQty > 0 && currQty < 0))\r\n            {\r\n                this.setState({formError : \"Quantity must be negative\"});\r\n                return;\r\n            }\r\n            if((currQty < 0 && inputQty > 0))\r\n            {\r\n                this.setState({formError : \"Quantity must be positive\"});\r\n                return;\r\n            }\r\n\r\n            this.setState({ isLoading:true });\r\n            \r\n            let service = new ItemService();\r\n            let reqObj = {\r\n                lineNumber: parseInt(this.props.itemObj.lineNumber),\r\n                itemQty: inputQty\r\n            };\r\n            \r\n            service.setItemQty(reqObj).then(res =>\r\n            {\r\n                if(res.data.flowSuccess === true)\r\n                {\r\n                    this.setState({ isLoading:false });\r\n                    this.props.doClose();\r\n                }\r\n                else\r\n                {\r\n                    this.setState({formError : res.data.errorMsg , isLoading:false})\r\n                }\r\n            });\r\n        }\r\n        catch(e)\r\n        {\r\n            console.error(e);\r\n        }\r\n        return;\r\n    }\r\n\r\n    render() \r\n    {\r\n        let formData = this.state.formData;\r\n        let formError = this.state.formError;\r\n\r\n        let render = [];\r\n        render.push(   \r\n            <div key=\"modal-header\" className=\"modal-header\">\r\n                <h3 className=\"modal-title\" style={{margin:\"auto\"}}> Enter the Quantity</h3> \r\n            </div>\r\n        );\r\n\r\n        render.push(\r\n            <div key=\"modal-body\" className=\"modal-body\">\r\n                <form>\r\n                    <Input name=\"itemQty\" type=\"text\" value={formData.itemQty} onChange={this.handleInputChange}  />\r\n                </form>\r\n            </div>\r\n        );\r\n        \r\n        render.push(\r\n            <div key=\"modal-footer\" className=\"modal-footer\">\r\n                <button\r\n                    type=\"button\" className=\"btn btn-danger\" \r\n                    id=\"signIn_FormSubmit\" style={{width: \"48%\"}} \r\n                    onClick={() => this.props.doClose()}  > \r\n                    Cancel\r\n                </button>\r\n                <button\r\n                    type=\"button\" className=\"btn btn-success\" \r\n                    id=\"signIn_FormSubmit\" style={{width: \"48%\",backgroundColor:\"#f16b52\"}} \r\n                    onClick={() => this.handleFormSubmit()} > \r\n                    Confirm\r\n                </button>\r\n            </div>\r\n        );\r\n\r\n        if(formError && formError !== \"\")\r\n        {\r\n            render.push(\r\n                <div key=\"modal-error\" className=\"list-group-item list-group-item-danger\" > { formError } </div>\r\n            );\r\n        }\r\n\r\n        return ( \r\n        \r\n            <div>\r\n                <div className=\"modal-dialog \" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        {render}\r\n                    </div>\r\n                </div>\r\n                { this.state.isLoading &&  <Loading/> }\r\n            </div>\r\n         );\r\n    }\r\n\r\n}\r\n \r\nexport default ChangeQty;","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\Payment.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\RemoveLine.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\LineDisc.component.jsx",["179","180","181","182"],"\r\nimport React from 'react';\r\nimport Form from './Form.component';\r\nimport Input from './Input.component';\r\nimport Joi from 'joi-browser';\r\nimport Loading from './Loading.component';\r\nimport ItemService from '../../apiServices/ItemService';\r\n\r\nclass LineDisc extends Form \r\n{\r\n    state = { \r\n        isLoading:false,\r\n        activeTab:0,\r\n        formData: {\r\n            percentage : 0,\r\n            price : 0\r\n        },\r\n        formError : \"\"\r\n    };\r\n\r\n    schema = {\r\n        percentage: Joi.number(),\r\n        price: Joi.number()\r\n    };\r\n\r\n    toggleDiscTab(discTab)\r\n    {\r\n        this.setState({ activeTab:discTab.id });\r\n        return;\r\n    }\r\n\r\n    submitForm = () =>\r\n    {   \r\n        try\r\n        {  \r\n            let maxVal = this.props.itemObj.itemPrice;\r\n            let inputPrice = parseFloat(this.state.formData.price);\r\n            let inputPerc = parseFloat(this.state.formData.percentage);\r\n            let discountAmt = 0;\r\n\r\n            if(this.state.activeTab == 0)\r\n            {\r\n                if(inputPerc === 0)\r\n                {\r\n                    this.props.doClose();\r\n                    return;\r\n                }\r\n                if(inputPerc < 0 || inputPerc > 99)\r\n                {\r\n                    this.setState({formError : \"Invalid input!\"});\r\n                    return;\r\n                }\r\n                discountAmt = (maxVal * inputPerc / 100);\r\n            }\r\n            else \r\n            {\r\n                if(inputPerc < 0 || inputPerc > maxVal)\r\n                {\r\n                    this.setState({formError : \"Invalid input!\"});\r\n                    return;\r\n                }\r\n                if(this.state.activeTab == 1)\r\n                {       \r\n                    if(inputPrice === 0)\r\n                    {\r\n                        this.props.doClose();\r\n                        return;\r\n                    }\r\n                    discountAmt = inputPrice;\r\n                }\r\n                if(this.state.activeTab == 2)\r\n                {       \r\n                    if(inputPrice === maxVal)\r\n                    {\r\n                        this.props.doClose();\r\n                        return;\r\n                    }\r\n                    discountAmt = maxVal - inputPrice;\r\n                }\r\n            }\r\n            \r\n            this.setState({ isLoading:true });\r\n            \r\n            let service = new ItemService();\r\n            let reqObj = {\r\n                lineNumber: parseInt(this.props.itemObj.lineNumber),\r\n                discountAmt: -1 * parseFloat(discountAmt).toFixed(2)\r\n            };\r\n            service.lineDiscount(reqObj).then(res =>\r\n            {\r\n                if(res.data.flowSuccess === true)\r\n                {\r\n                    this.setState({ isLoading:false });\r\n                    this.props.doClose();\r\n                }\r\n                else\r\n                {\r\n                    this.setState({formError : res.data.errorMsg , isLoading:false})\r\n                }\r\n            });\r\n        }\r\n        catch(e)\r\n        {\r\n            console.error(e);\r\n        }\r\n        return;\r\n    }\r\n\r\n    render() \r\n    {\r\n        let formData = this.state.formData;\r\n        let formError = this.state.formError;\r\n\r\n        let render = [];\r\n        render.push(   \r\n            <div key=\"modal-header\" className=\"modal-header\">\r\n                <h3 className=\"modal-title\" style={{margin:\"auto\"}}>  Line Discount </h3> \r\n            </div>\r\n        );\r\n        \r\n        let tabBtns = [];\r\n        tabBtns.push( {key:\"percent\", id:0, text:\"Percentage\", } );\r\n        tabBtns.push( {key:\"redPrice\", id:1, text:\"Reduce Price\", } );\r\n        tabBtns.push( {key:\"setPrice\", id:2, text:\"Set Price\", } );\r\n        \r\n        let tabBtnRender = [];\r\n        \r\n        tabBtns.forEach(tabBtn => {\r\n            if(tabBtn.id === this.state.activeTab)\r\n            {\r\n                tabBtnRender.push(\r\n                    <li key={tabBtn.id} className=\"nav-item\">\r\n                        <button key={tabBtn.id} className=\"nav-link active\"  style={{fontSize:\"16px\"}}\r\n                                type=\"button\" onClick={() => this.toggleDiscTab(tabBtn)} >  \r\n                            {tabBtn.text} \r\n                        </button>\r\n                    </li>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                tabBtnRender.push(\r\n                    <li key={tabBtn.id} className=\"nav-item\">\r\n                        <button key={tabBtn.id} className=\"nav-link\" style={{fontSize:\"16px\"}}\r\n                                type=\"button\" onClick={() => this.toggleDiscTab(tabBtn)} >  \r\n                            {tabBtn.text} \r\n                        </button>\r\n                    </li>\r\n                );\r\n            }\r\n        });\r\n        \r\n        let tabContentRender =  <form>\r\n                <Input key={this.state.activeTab} name=\"price\" type=\"number\" min=\"0.00\" step=\"0.01\" value={formData.price} onChange={this.handleInputChange}  />\r\n            </form>;\r\n            \r\n        if(this.state.activeTab == 0)\r\n        {\r\n            tabContentRender =  <form>\r\n                    <Input key={this.state.activeTab} name=\"percentage\" type=\"number\" min=\"0.00\"  step=\"0.01\" value={formData.percentage} onChange={this.handleInputChange}  />\r\n                </form>;\r\n        }\r\n\r\n\r\n        render.push(\r\n            <div key=\"modal-body\" className=\"modal-body\">\r\n                <ul className=\"nav nav-tabs\" id=\"myTab\" >\r\n                    {tabBtnRender}\r\n                </ul>\r\n                <hr/>\r\n                <div>\r\n                    {tabContentRender}\r\n                </div>\r\n            </div>\r\n        );\r\n        \r\n        render.push(\r\n            <div key=\"modal-footer\" className=\"modal-footer\">\r\n                <button\r\n                    type=\"button\" className=\"btn btn-danger\" \r\n                    id=\"signIn_FormSubmit\" style={{width: \"48%\"}} \r\n                    onClick={() => this.props.doClose()}  > \r\n                    Cancel\r\n                </button>\r\n                <button\r\n                    type=\"button\" className=\"btn btn-success\" \r\n                    id=\"signIn_FormSubmit\" style={{width: \"48%\",backgroundColor:\"#f16b52\"}} \r\n                    onClick={() => this.handleFormSubmit()} > \r\n                    Confirm\r\n                </button>\r\n            </div>\r\n        );\r\n\r\n        if(formError && formError !== \"\")\r\n        {\r\n            render.push(\r\n                <div key=\"modal-error\" className=\"list-group-item list-group-item-danger\" > { formError } </div>\r\n            );\r\n        }\r\n\r\n        return ( \r\n        \r\n            <div>\r\n                <div className=\"modal-dialog \" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        {render}\r\n                    </div>\r\n                </div>\r\n                { this.state.isLoading &&  <Loading/> }\r\n            </div>\r\n         );\r\n    }\r\n\r\n}\r\n \r\nexport default LineDisc;","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\TotalDisc.component.jsx",["183","184","185","186"],"\r\nimport React from 'react';\r\nimport Form from './Form.component';\r\nimport Input from './Input.component';\r\nimport Joi from 'joi-browser';\r\nimport Loading from './Loading.component';\r\nimport TransactionService from '../../apiServices/TransactionService';\r\n\r\nclass TotalDisc extends Form \r\n{\r\n    state = { \r\n        isLoading:false,\r\n        activeTab:0,\r\n        formData: {\r\n            percentage : 0,\r\n            price : 0\r\n        },\r\n        formError : \"\"\r\n    };\r\n\r\n    schema = {\r\n        percentage: Joi.number(),\r\n        price: Joi.number()\r\n    };\r\n\r\n    toggleDiscTab(discTab)\r\n    {\r\n        this.setState({ activeTab:discTab.id });\r\n        return;\r\n    }\r\n\r\n    submitForm = () =>\r\n    {   \r\n        try\r\n        {  \r\n            let maxVal = this.props.transaction.amountOwed;\r\n            let inputPrice = parseFloat(this.state.formData.price);\r\n            let inputPerc = parseFloat(this.state.formData.percentage);\r\n            let discountAmt = 0;\r\n\r\n            if(this.state.activeTab == 0)\r\n            {\r\n                if(inputPerc === 0)\r\n                {\r\n                    this.props.doClose();\r\n                    return;\r\n                }\r\n                if(inputPerc < 0 || inputPerc > 99)\r\n                {\r\n                    this.setState({formError : \"Invalid input!\"});\r\n                    return;\r\n                }\r\n                discountAmt = (maxVal * inputPerc / 100);\r\n            }\r\n            else \r\n            {\r\n                if(inputPerc < 0 || inputPerc > maxVal)\r\n                {\r\n                    this.setState({formError : \"Invalid input!\"});\r\n                    return;\r\n                }\r\n                if(this.state.activeTab == 1)\r\n                {       \r\n                    if(inputPrice === 0)\r\n                    {\r\n                        this.props.doClose();\r\n                        return;\r\n                    }\r\n                    discountAmt = inputPrice;\r\n                }\r\n                if(this.state.activeTab == 2)\r\n                {       \r\n                    if(inputPrice === maxVal)\r\n                    {\r\n                        this.props.doClose();\r\n                        return;\r\n                    }\r\n                    discountAmt = maxVal - inputPrice;\r\n                }\r\n            }\r\n            \r\n            this.setState({ isLoading:true });\r\n            \r\n            let service = new TransactionService();\r\n            let reqObj = {\r\n                discountAmt: -1 * parseFloat(discountAmt).toFixed(2)\r\n            };\r\n            service.totalDiscount(reqObj).then(res =>\r\n            {\r\n                if(res.data.flowSuccess === true)\r\n                {\r\n                    this.setState({ isLoading:false });\r\n                    this.props.doClose();\r\n                }\r\n                else\r\n                {\r\n                    this.setState({formError : res.data.errorMsg , isLoading:false})\r\n                }\r\n            });\r\n        }\r\n        catch(e)\r\n        {\r\n            console.error(e);\r\n        }\r\n        return;\r\n    }\r\n\r\n    render() \r\n    {\r\n        let formData = this.state.formData;\r\n        let formError = this.state.formError;\r\n\r\n        let render = [];\r\n        render.push(   \r\n            <div key=\"modal-header\" className=\"modal-header\">\r\n                <h3 className=\"modal-title\" style={{margin:\"auto\"}}>  Total Discount </h3> \r\n            </div>\r\n        );\r\n        \r\n        let tabBtns = [];\r\n        tabBtns.push( {key:\"percent\", id:0, text:\"Percentage\", } );\r\n        tabBtns.push( {key:\"redPrice\", id:1, text:\"Reduce Price\", } );\r\n        tabBtns.push( {key:\"setPrice\", id:2, text:\"Set Price\", } );\r\n        \r\n        let tabBtnRender = [];\r\n        \r\n   \r\n        tabBtns.forEach(tabBtn => {\r\n            if(tabBtn.id === this.state.activeTab)\r\n            {\r\n                tabBtnRender.push(\r\n                    <li key={tabBtn.id} className=\"nav-item\">\r\n                        <button key={tabBtn.id} className=\"nav-link active\"  style={{fontSize:\"16px\"}}\r\n                                type=\"button\" onClick={() => this.toggleDiscTab(tabBtn)} >  \r\n                            {tabBtn.text} \r\n                        </button>\r\n                    </li>\r\n                );\r\n            }\r\n            else\r\n            {\r\n                tabBtnRender.push(\r\n                    <li key={tabBtn.id} className=\"nav-item\">\r\n                        <button key={tabBtn.id} className=\"nav-link\" style={{fontSize:\"16px\"}}\r\n                                type=\"button\" onClick={() => this.toggleDiscTab(tabBtn)} >  \r\n                            {tabBtn.text} \r\n                        </button>\r\n                    </li>\r\n                );\r\n            }\r\n        });\r\n        \r\n        let tabContentRender =  <form>\r\n                <Input key={this.state.activeTab} name=\"price\" type=\"number\" min=\"0.00\" step=\"0.01\" value={formData.price} onChange={this.handleInputChange}  />\r\n            </form>;\r\n            \r\n        if(this.state.activeTab == 0)\r\n        {\r\n            tabContentRender =  <form>\r\n                    <Input key={this.state.activeTab} name=\"percentage\" type=\"number\" min=\"0.00\"  step=\"0.01\" value={formData.percentage} onChange={this.handleInputChange}  />\r\n                </form>;\r\n        }\r\n\r\n        render.push(\r\n            <div key=\"modal-body\" className=\"modal-body\">\r\n                <ul className=\"nav nav-tabs\" id=\"myTab\">\r\n                    {tabBtnRender}\r\n                </ul>\r\n                <hr/>\r\n                <div>\r\n                    {tabContentRender}\r\n                </div>\r\n            </div>\r\n        );\r\n        \r\n        render.push(\r\n            <div key=\"modal-footer\" className=\"modal-footer\">\r\n                <button\r\n                    type=\"button\" className=\"btn btn-danger\" \r\n                    id=\"signIn_FormSubmit\" style={{width: \"48%\"}} \r\n                    onClick={() => this.props.doClose()}  > \r\n                    Cancel\r\n                </button>\r\n                <button\r\n                    type=\"button\" className=\"btn btn-success\" \r\n                    id=\"signIn_FormSubmit\" style={{width: \"48%\",backgroundColor:\"#f16b52\"}} \r\n                    onClick={() => this.handleFormSubmit()} > \r\n                    Confirm\r\n                </button>\r\n            </div>\r\n        );\r\n\r\n        if(formError && formError !== \"\")\r\n        {\r\n            render.push(\r\n                <div key=\"modal-error\" className=\"list-group-item list-group-item-danger\" > { formError } </div>\r\n            );\r\n        }\r\n\r\n        return ( \r\n        \r\n            <div>\r\n                <div className=\"modal-dialog \" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        {render}\r\n                    </div>\r\n                </div>\r\n                { this.state.isLoading &&  <Loading/> }\r\n            </div>\r\n         );\r\n    }\r\n\r\n}\r\n \r\nexport default TotalDisc;","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\AbortTxn.component.jsx",["187","188","189"],"\r\nimport React, { Component } from 'react';\r\nimport Constants from '../../DTOs/Constants'\r\nimport TransactionService from '../../apiServices/TransactionService';\r\nimport Swal from 'sweetalert2'\r\n\r\nclass AbortTxn extends Component \r\n{\r\n\r\n    async callAbortTxn()\r\n    {   \r\n        try\r\n        {    \r\n            let service = new TransactionService();\r\n            \r\n            service.abortTxn().then(res =>\r\n            {\r\n                if(res.data.flowSuccess === true)\r\n                {\r\n                    this.props.doClose();\r\n                    return true;\r\n                }\r\n                else\r\n                {\r\n                    console.error(res.data.errorMsg)\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        catch(e)\r\n        {\r\n            console.error(e);\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n    render() \r\n    { \r\n        const selectedLineNmbr = this.props.selectedLineNmbr ;\r\n\r\n        Swal.fire({\r\n            title: 'Abort Transaction?',\r\n            text: \"Are you sure you want to abort the current transaction ?\",\r\n            type: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes',\r\n            confirmButtonColor: '#3a3'\r\n          }).then((res) => {\r\n            if(res.isConfirmed) \r\n            {\r\n                if (this.callAbortTxn()) \r\n                {\r\n                    Swal.fire(\r\n                        'Transaction aborted!','',\r\n                        'success'\r\n                    );\r\n                }\r\n                else\r\n                {\r\n                    Swal.fire({\r\n                        type: 'error',\r\n                        text: 'Transaction could not be aborted!'\r\n                    });\r\n                }\r\n            }\r\n            else\r\n                this.props.doClose();\r\n          });\r\n\r\n          return (<div/>);\r\n    }\r\n}\r\n \r\nexport default AbortTxn;","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Txn_components\\ItemLine.component.jsx",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\components\\Popup_Components\\SearchItem.component.jsx",["190","191","192"],"\r\nimport React from 'react';\r\nimport Form from './Form.component';\r\nimport Joi from 'joi-browser';\r\nimport ItemService from '../../apiServices/ItemService';\r\nimport Loading from './Loading.component';\r\n\r\nconst SearchItem = (props) => \r\n{\r\n    let formData = props.formData;\r\n    let modalBody = <div key=\"modal-body\" className=\"modal-body\"  >\r\n            <div className=\"row\" style={{padding:\"10px\"}}>\r\n                <label htmlFor=\"ItemID\" className=\"col-2\"> \r\n                        Item ID \r\n                </label>  \r\n                <input autoFocus type=\"text\"  className=\"col-3\"\r\n                    onChange={(e) => props.handleInputChange(e)} \r\n                    name=\"ItemID\"  value={formData.ItemID} />\r\n\r\n                <label htmlFor=\"ItemName\" className=\"col-2\"> \r\n                        Item Name \r\n                </label>  \r\n                <input autoFocus type=\"text\" className=\"col-3\" \r\n                    onChange={(e) => props.handleInputChange(e)} \r\n                    name=\"ItemName\" value={formData.ItemName}  />\r\n                \r\n                <button \r\n                    type=\"button\" className=\"btn\"\r\n                    style={{backgroundColor:\"#f16b52\" , marginLeft:\"10px\" , width:\"15%\"}} \r\n                    onClick={() => props.getItems()} > \r\n                    Search\r\n                </button>\r\n            </div>\r\n\r\n            <div style={{  padding:\"10px\"}} >\r\n                <div className=\"row\" style={{fontWeight:\"600\"}} >\r\n                    <div className=\"col-3\" style={{textAlign:\"left\"}} >   Item ID  </div>  \r\n                    <div className=\"col-4\" style={{textAlign:\"left\"}} >   Item Name  </div>  \r\n                    <div className=\"col-3\" style={{textAlign:\"right\"}} >   Item Price  </div>  \r\n                    <hr className=\"col-11\" style={{margin:\"5px\"}} />\r\n                </div>\r\n\r\n                <div style={{height:\"320px\" , overflowY:\"auto\", overflowX:\"hidden\"}}>\r\n                { props.ItemData.map( (item) =>\r\n                        <div className=\"row\" key={item.itemId} style={{cursor:\"pointer\"}} >\r\n                            <div className=\"col-3\" style={{textAlign:\"left\"}} >  {item.itemId}  </div>  \r\n                            <div className=\"col-4\" style={{textAlign:\"left\"}} > {item.itemName}  </div>  \r\n                            <div className=\"col-3\" style={{textAlign:\"right\"}} > { item.itemPrice.toFixed(2) } </div>  \r\n                            <button \r\n                                type=\"button\" className=\"btn\"\r\n                                style={{backgroundColor:\"#f16b52\" , width:\"15%\"}} \r\n                                onClick={() => props.addItem(item.itemId)} > \r\n                                Add\r\n                            </button>\r\n                            <hr className=\"col-11\" style={{margin:\"5px\"}} />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>;\r\n        \r\n    if(props.isMobile)\r\n    {\r\n        modalBody = <div key=\"modal-body\" className=\"modal-body\"  >\r\n            <div className=\"row\" style={{padding:\"10px\"}}>\r\n                <label htmlFor=\"ItemID\" className=\"col-5\"> \r\n                        Item ID \r\n                </label>  \r\n                <input autoFocus type=\"text\"  className=\"col-6\"\r\n                    onChange={(e) => props.handleInputChange(e)} \r\n                    name=\"ItemID\"  value={formData.ItemID} />\r\n\r\n                <label htmlFor=\"ItemName\" className=\"col-5\"> \r\n                        Item Name \r\n                </label>  \r\n                <input autoFocus type=\"text\" className=\"col-6\" \r\n                    onChange={(e) => props.handleInputChange(e)} \r\n                    name=\"ItemName\" value={formData.ItemName}  />\r\n                \r\n                <button \r\n                    type=\"button\" className=\"btn col-11\"\r\n                    style={{backgroundColor:\"#f16b52\" , color:\"white\", margin:\"10px\" , width:\"15%\"}} \r\n                    onClick={() => props.getItems()} > \r\n                    Search\r\n                </button>\r\n            </div>\r\n                <div style={{  padding:\"10px\"}} >\r\n                    <div className=\"row\" style={{fontWeight:\"600\"}} >\r\n                        <div className=\"col-3\" style={{textAlign:\"left\"}} > ID  </div>  \r\n                        <div className=\"col-4\" style={{textAlign:\"left\"}} >  Name  </div>  \r\n                        <div className=\"col-3\" style={{textAlign:\"right\"}} >  Price  </div>  \r\n                        <hr className=\"col-11\" style={{margin:\"5px\"}} />\r\n                    </div>\r\n\r\n                    <div style={{height:\"320px\" , overflowY:\"auto\", overflowX:\"hidden\"}}>\r\n                    { props.ItemData.map( (item) =>\r\n                            <div className=\"row\" key={item.itemId} style={{cursor:\"pointer\"}} >\r\n                                <div className=\"col-3\" style={{textAlign:\"left\"}} >  {item.itemId}  </div>  \r\n                                <div className=\"col-4\" style={{textAlign:\"left\"}} > {item.itemName}  </div>  \r\n                                <div className=\"col-4\" style={{textAlign:\"right\"}} > { item.itemPrice.toFixed(2) } </div>  \r\n                                <button \r\n                                    type=\"button\" className=\"btn col-11\" \r\n                                    style={{backgroundColor:\"#f16b52\" , color:\"white\", width:\"15%\"}} \r\n                                    onClick={() => props.addItem(item.itemId)} > \r\n                                    Add\r\n                                </button>\r\n                                <hr className=\"col-11\" style={{margin:\"5px\"}} />\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n            </div>\r\n\r\n        </div>;\r\n    }\r\n\r\n    return ( \r\n    \r\n        <div style={{ marginLeft:\"5%\", width:\"90%\"}} >\r\n                        \r\n            <div className=\"modal-lg\" style={{width:\"100%\" , margin:\"auto\" ,fontSize:\"18px\"}}  >\r\n      \r\n                <div className=\"modal-content\" style={{width:\"100%\"}}>     \r\n                    <div key=\"modal-header\" className=\"modal-header\">\r\n                        <h4 className=\"modal-title\" style={{margin:\"auto\"}}> Search for item </h4> \r\n                        <button type=\"button\" style={{fontSize:\"25px\" , marginLeft:\"0px\" }} \r\n                            onClick={() => props.doClose()}  className=\"close\" >\r\n                             &times;\r\n                        </button>\r\n                    </div>\r\n                    \r\n                    {modalBody}\r\n                    \r\n                    { props.formError !== \"\" &&\r\n                        <div key=\"modal-error\" className=\"list-group-item list-group-item-danger\" > { props.formError } </div> \r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n            \r\n            { props.isLoading &&  <Loading/> }\r\n        </div>\r\n     );\r\n\r\n}\r\n \r\nexport default SearchItem;","D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\PaymentService.js",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\CustomerService.js",[],"D:\\My Stuff\\Work\\Project repositories\\MernPos\\Client\\src\\apiServices\\ItemService.js",[],{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},{"ruleId":"197","severity":1,"message":"198","line":51,"column":13,"nodeType":"199","endLine":51,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":92,"column":13,"nodeType":"199","endLine":92,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":106,"column":13,"nodeType":"199","endLine":106,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":112,"column":13,"nodeType":"199","endLine":112,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":135,"column":25,"nodeType":"199","endLine":135,"endColumn":46},{"ruleId":"197","severity":1,"message":"198","line":136,"column":25,"nodeType":"199","endLine":136,"endColumn":46},{"ruleId":"197","severity":1,"message":"198","line":146,"column":13,"nodeType":"199","endLine":146,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":157,"column":13,"nodeType":"199","endLine":157,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":158,"column":13,"nodeType":"199","endLine":158,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":164,"column":13,"nodeType":"199","endLine":164,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":170,"column":13,"nodeType":"199","endLine":170,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":192,"column":21,"nodeType":"199","endLine":192,"endColumn":42},{"ruleId":"197","severity":1,"message":"198","line":193,"column":21,"nodeType":"199","endLine":193,"endColumn":42},{"ruleId":"197","severity":1,"message":"198","line":199,"column":21,"nodeType":"199","endLine":199,"endColumn":42},{"ruleId":"197","severity":1,"message":"198","line":208,"column":13,"nodeType":"199","endLine":208,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":217,"column":9,"nodeType":"199","endLine":217,"endColumn":30},{"ruleId":"197","severity":1,"message":"198","line":225,"column":13,"nodeType":"199","endLine":225,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":231,"column":13,"nodeType":"199","endLine":231,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":242,"column":13,"nodeType":"199","endLine":242,"endColumn":34},{"ruleId":"197","severity":1,"message":"198","line":248,"column":13,"nodeType":"199","endLine":248,"endColumn":34},{"ruleId":"200","severity":1,"message":"201","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":17},{"ruleId":"204","severity":1,"message":"205","line":19,"column":9,"nodeType":"206","messageId":"207","endLine":74,"endColumn":10},{"ruleId":"200","severity":1,"message":"201","line":3,"column":8,"nodeType":"202","messageId":"203","endLine":3,"endColumn":17},{"ruleId":"200","severity":1,"message":"208","line":21,"column":9,"nodeType":"202","messageId":"203","endLine":21,"endColumn":12},{"ruleId":"200","severity":1,"message":"209","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":15},{"ruleId":"200","severity":1,"message":"209","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":15},{"ruleId":"200","severity":1,"message":"210","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":19},{"ruleId":"200","severity":1,"message":"211","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":26},{"ruleId":"200","severity":1,"message":"212","line":8,"column":8,"nodeType":"202","messageId":"203","endLine":8,"endColumn":22},{"ruleId":"213","severity":1,"message":"214","line":41,"column":37,"nodeType":"215","messageId":"216","endLine":41,"endColumn":39},{"ruleId":"213","severity":1,"message":"214","line":62,"column":41,"nodeType":"215","messageId":"216","endLine":62,"endColumn":43},{"ruleId":"213","severity":1,"message":"214","line":71,"column":41,"nodeType":"215","messageId":"216","endLine":71,"endColumn":43},{"ruleId":"213","severity":1,"message":"214","line":157,"column":33,"nodeType":"215","messageId":"216","endLine":157,"endColumn":35},{"ruleId":"213","severity":1,"message":"214","line":41,"column":37,"nodeType":"215","messageId":"216","endLine":41,"endColumn":39},{"ruleId":"213","severity":1,"message":"214","line":62,"column":41,"nodeType":"215","messageId":"216","endLine":62,"endColumn":43},{"ruleId":"213","severity":1,"message":"214","line":71,"column":41,"nodeType":"215","messageId":"216","endLine":71,"endColumn":43},{"ruleId":"213","severity":1,"message":"214","line":157,"column":33,"nodeType":"215","messageId":"216","endLine":157,"endColumn":35},{"ruleId":"200","severity":1,"message":"201","line":3,"column":8,"nodeType":"202","messageId":"203","endLine":3,"endColumn":17},{"ruleId":"200","severity":1,"message":"217","line":40,"column":15,"nodeType":"202","messageId":"203","endLine":40,"endColumn":31},{"ruleId":"218","severity":1,"message":"219","line":50,"column":13,"nodeType":"220","messageId":"216","endLine":50,"endColumn":31},{"ruleId":"200","severity":1,"message":"221","line":3,"column":8,"nodeType":"202","messageId":"203","endLine":3,"endColumn":12},{"ruleId":"200","severity":1,"message":"222","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":11},{"ruleId":"200","severity":1,"message":"210","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":19},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-unused-vars","'Constants' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'txn' is assigned a value but never used.","'Loading' is defined but never used.","'ItemService' is defined but never used.","'TransactionService' is defined but never used.","'PaymentService' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'selectedLineNmbr' is assigned a value but never used.","no-dupe-keys","Duplicate key 'confirmButtonColor'.","ObjectExpression","'Form' is defined but never used.","'Joi' is defined but never used.","no-global-assign","no-unsafe-negation"]